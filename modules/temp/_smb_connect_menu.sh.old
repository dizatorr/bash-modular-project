#!/usr/bin/env bash
# === MENU: Подключение к SMB ресурсам
# === FUNC: smb_connect_menu
# Автор: Diz A Torr
# Версия: 1.0
# Лицензия: MIT
# Описание: Подключение и работа с SMB ресурсами

# --- Константы ---
readonly SCRIPT_DIR=$(dirname "$(realpath "${BASH_SOURCE[0]}")")
readonly DEFAULT_CONFIG_FILE="$SCRIPT_DIR/config/smb_quick.conf"
readonly TEMP_MOUNT_PREFIX="smb_mount_"

# --- Глобальные переменные ---
# Предполагается, что эти переменные определены в основном скрипте
# RED, BLUE, YELLOW, NC, log_error, log_warn, log_info, show_menu

# --- Функции проверки зависимостей ---
check_smbclient_installed() {
    if ! command -v smbclient &>/dev/null; then
        log_error "smbclient не установлен"
        echo -e "${RED}Установите пакет samba-common-bin${NC}"
        return 1
    fi
    return 0
}

check_mount_cifs_installed() {
    if ! command -v mount.cifs &>/dev/null; then
        log_warn "mount.cifs не установлен - монтирование будет недоступно"
        return 1
    fi
    return 0
}

# --- Функции работы с конфигурацией ---
create_default_smb_config_if_needed() {
    local config_file="$1"
    if [[ ! -f "$config_file" ]]; then
        mkdir -p "$(dirname "$config_file")"
        cat > "$config_file" << 'EOF'
# Файл быстрого доступа к SMB ресурсам
# Формат: сервер|ресурс|отображаемое_имя|дополнительные_опции
# Дополнительные опции: domain=имя_домена,vers=версия и т.д.
# Примеры:
pc.local|Проекты$|Проекты|domain=pc.local
EOF
        log_info "Создан файл конфигурации: $config_file"
    fi
}

load_smb_resources_from_file() {
    local config_file="$1"
    local resources=()
    [[ ! -f "$config_file" ]] && return

    while IFS= read -r line || [[ -n "$line" ]]; do
        # Пропускаем комментарии и пустые строки
        [[ "$line" =~ ^[[:space:]]*# ]] && continue
        [[ -z "${line//[[:space:]]/}" ]] && continue
        # Проверяем формат: сервер|ресурс|отображаемое_имя|опции
        if [[ "$line" == *'|'* ]]; then
            resources+=("$line")
        fi
    done < "$config_file"
    echo "${resources[@]}"
}

extract_display_names() {
    local resources=("$@")
    local names=()
    local server share display_name options

    for resource in "${resources[@]}"; do
        IFS='|' read -r server share display_name options <<< "$resource"
        [[ -n "$display_name" ]] && names+=("$display_name")
    done
    echo "${names[@]}"
}

# --- Функции ввода данных ---
get_smb_username_interactive() {
    local username
    if [[ -n "$SMB_DEFAULT_USER" ]]; then
        echo "$SMB_DEFAULT_USER"
    else
        read -p "Имя пользователя [domen\name или name@domen] (оставьте пустым для гостевого доступа): " username
        echo "$username"
    fi
}

prompt_for_server_and_share() {
    local server share
    read -p "Адрес сервера: " server
    read -p "Имя ресурса (share): " share
    echo "$server"
    echo "$share"
}

select_resource_from_config() {
    local config_file="$1"
    local shares_data=($(load_smb_resources_from_file "$config_file"))
    local display_names=($(extract_display_names "${shares_data[@]}"))

    if [[ ${#display_names[@]} -eq 0 ]]; then
        return 1 # Нет настроенных ресурсов
    fi

    echo "Выберите ресурс из списка или введите вручную:"
    for i in "${!display_names[@]}"; do
        echo "$((i+1)). ${display_names[$i]}"
    done
    echo "0. Ввести вручную"
    echo

    local choice
    read -p "Выбор (0-${#display_names[@]}): " choice

    if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice > 0 )) && (( choice <= ${#shares_data[@]} )); then
        local selected_share="${shares_data[$((choice-1))]}"
        echo "$selected_share"
        return 0
    elif [[ "$choice" == "0" ]]; then
        return 2 # Ввести вручную
    else
        log_warn "Некорректный выбор"
        return 3 # Ошибка выбора
    fi
}

# --- Функции подключения и монтирования ---
connect_via_smbclient() {
    local server="$1"
    local share="$2"
    local username="$3"

    if [[ -z "$server" || -z "$share" ]]; then
        log_warn "Не указаны обязательные параметры (сервер или ресурс)"
        return 1
    fi

    local smb_path="//${server}/${share}"
    echo -e "${YELLOW}Подключение к: $smb_path${NC}"

    local exit_code
    if [[ -n "$username" ]]; then
        smbclient "$smb_path" -U "$username"
        exit_code=$?
    else
        smbclient "$smb_path" -N
        exit_code=$?
    fi

    if [[ $exit_code -eq 0 ]]; then
        log_info "Успешное подключение к $smb_path"
    else
        log_error "Ошибка подключения к $smb_path (код: $exit_code)"
    fi
    return $exit_code
}

mount_smb_share() {
    local server="$1"
    local share="$2"
    local display_name="$3"
    local options="$4" # Опции из конфига

    if ! check_mount_cifs_installed; then
        log_error "mount.cifs не установлен"
        echo -e "${RED}Установите пакет cifs-utils${NC}"
        return 1
    fi

    local username password domain
    username=$(get_smb_username_interactive)

    # Извлекаем домен из опций конфигурации
    if [[ -n "$options" && "$options" == *"domain="* ]]; then
        domain=$(echo "$options" | grep -o "domain=[^,]*" | cut -d'=' -f2)
    fi

    # Если домен не указан в конфиге, спрашиваем у пользователя
    if [[ -z "$domain" && -n "$username" ]]; then
        read -p "Домен (например, teconpc.local, оставьте пустым если не нужен): " domain
    fi

    local mount_point
    read -p "Точка монтирования (пусто для временной): " mount_point

    if [[ -z "$mount_point" ]]; then
        mount_point=$(mktemp -d)
        echo -e "${YELLOW}Создана временная точка монтирования: $mount_point${NC}"
    fi

    # Создаем точку монтирования если не существует
    if [[ ! -d "$mount_point" ]]; then
        mkdir -p "$mount_point" || {
            log_error "Не удалось создать точку монтирования: $mount_point"
            return 1
        }
    fi

    local smb_path="//${server}/${share}"

    # Подготовка опций монтирования
    local options_array=()
    local cred_options=()
    local cred_file=""

    # Добавляем базовые опции
    options_array+=("uid=$(id -u)")
    options_array+=("gid=$(id -g)")
    options_array+=("iocharset=utf8")
    options_array+=("sec=ntlmssp")

    if [[ -n "$username" ]]; then
        # Если указан пользователь, запрашиваем пароль
        read -s -p "Пароль для $username: " password
        echo

        # Обрабатываем имя пользователя - если содержит домен, разделяем
        local user_only="$username"
        local user_domain=""

        if [[ "$username" == *"\\"* ]]; then
            # Формат: домен\пользователь
            user_domain="${username%%\\*}"
            user_only="${username#*\\}"
        elif [[ "$username" == *"@"* ]]; then
            # Формат: пользователь@домен
            user_only="${username%@*}"
            user_domain="${username#*@}"
        fi

        # Создаем временный файл с учетными данными
        cred_file=$(mktemp)
        echo "username=$user_only" > "$cred_file"
        echo "password=$password" >> "$cred_file"
        [[ -n "$user_domain" ]] && echo "domain=$user_domain" >> "$cred_file"
        chmod 600 "$cred_file"
        options_array+=("credentials=$cred_file")
        cred_options+=("credentials=$cred_file")
    else
        # Гостевой доступ
        options_array+=("guest")
    fi

    # Добавляем домен в опции, если он указан отдельно
    if [[ -n "$domain" && -z "$(echo "${cred_options[*]}" | grep domain)" ]]; then
        options_array+=("domain=$domain")
    fi

    # Добавляем опции из конфигурации (кроме domain, который уже обработан)
    if [[ -n "$options" ]]; then
        IFS=',' read -ra config_options <<< "$options"
        local opt config_domain
        for opt in "${config_options[@]}"; do
            opt=$(echo "$opt" | xargs) # trim whitespace
            # Пропускаем domain, если он уже добавлен
            if [[ -n "$opt" && "$opt" != "domain="* ]]; then
                options_array+=("$opt")
            elif [[ "$opt" == "domain="* && -z "$domain" ]]; then
                # Если domain не задан явно, берем из конфига
                config_domain="${opt#domain=}"
                if [[ -n "$config_domain" ]]; then
                    options_array+=("domain=$config_domain")
                fi
            fi
        done
    fi

    # Формируем строку опций
    local mount_options
    mount_options=$(IFS=','; echo "${options_array[*]}")

    echo -e "${YELLOW}Команда монтирования:${NC}"
    echo "sudo mount.cifs \"$smb_path\" \"$mount_point\" -o $mount_options"
    echo

    # Монтируем с учетными данными
    local result=0
    if sudo mount.cifs "$smb_path" "$mount_point" -o "$mount_options"; then
        log_info "Успешно смонтировано: $smb_path -> $mount_point"
    else
        log_error "Ошибка монтирования (код: $?)"
        echo -e "${YELLOW}Попробуйте указать домен в формате домен\\пользователь или пользователь@домен${NC}"
        result=1
        # Удаляем временную директорию если создавали
        [[ "$mount_point" == /tmp/* ]] && rmdir "$mount_point" 2>/dev/null
    fi

    # Удаляем временный файл с учетными данными
    [[ -n "$cred_file" ]] && rm -f "$cred_file"

    return $result
}

unmount_smb_share() {
    local mount_point
    read -p "Точка монтирования для отключения: " mount_point

    if [[ -n "$mount_point" && -d "$mount_point" ]]; then
        if sudo umount "$mount_point"; then
            log_info "Успешно отмонтировано: $mount_point"
            # Удаляем временную директорию
            [[ "$mount_point" == /tmp/* ]] && rmdir "$mount_point" 2>/dev/null
        else
            log_error "Ошибка отмонтирования"
        fi
    else
        log_warn "Указана некорректная точка монтирования"
    fi
}

show_mounted_cifs_shares() {
    if command -v mount &>/dev/null; then
        mount | grep -i cifs | grep -v grep || echo "Нет смонтированных CIFS ресурсов"
    else
        echo "Команда mount недоступна"
    fi
}

# --- Функции настройки ---
configure_smb_resources_interactive() {
    local config_file="$1"
    echo -e "${YELLOW}Редактирование файла: $config_file${NC}"
    echo
    echo "Формат конфигурации:"
    echo "сервер|ресурс|отображаемое_имя|дополнительные_опции"
    echo "Пример: nskshare.teconpc.local|ts|Файлопомойка|domain=teconpc.local,vers=3.0"
    echo

    # Создаем конфиг если его нет
    create_default_smb_config_if_needed "$config_file"

    # Выбираем редактор
    local editors=("nano" "vim" "vi" "gedit")
    local editor=""
    local ed
    for ed in "${editors[@]}"; do
        if command -v "$ed" &>/dev/null; then
            editor="$ed"
            break
        fi
    done

    if [[ -n "$editor" ]]; then
        $editor "$config_file"
    else
        echo "Доступные редакторы не найдены. Откройте файл вручную:"
        echo "$config_file"
        echo
        echo "=== Текущее содержимое ==="
        cat "$config_file"
        echo "========================"
        read -p "Нажмите Enter после редактирования файла..."
    fi
}

# --- Основные функции меню ---
smb_interactive_connect() {
    local config_file="$1"
    clear
    echo -e "${BLUE}=== Интерактивное подключение SMB ===${NC}"
    echo

    local selected_share_result
    selected_share_result=$(select_resource_from_config "$config_file")
    local select_status=$?

    local server share display_name options

    if [[ $select_status -eq 0 ]]; then
        # Выбран ресурс из конфига
        IFS='|' read -r server share display_name options <<< "$selected_share_result"
    elif [[ $select_status -eq 2 ]]; then
        # Ввести вручную
        local server_and_share
        server_and_share=($(prompt_for_server_and_share))
        server="${server_and_share[0]}"
        share="${server_and_share[1]}"
    else
        # Ошибка или нет ресурсов
        return
    fi

    # Получаем имя пользователя
    local username
    username=$(get_smb_username_interactive)

    # Подключаемся
    connect_via_smbclient "$server" "$share" "$username"
}

smb_mount_resource() {
    local config_file="$1"
    clear
    echo -e "${BLUE}=== Монтирование SMB ресурса ===${NC}"
    echo

    local shares_data=($(load_smb_resources_from_file "$config_file"))
    local display_names=($(extract_display_names "${shares_data[@]}"))

    if [[ ${#display_names[@]} -eq 0 ]]; then
        echo "Нет настроенных ресурсов. Сначала настройте список ресурсов."
        echo "Файл конфигурации: $config_file"
        return
    fi

    echo "Выберите ресурс для монтирования:"
    local i
    for i in "${!display_names[@]}"; do
        echo "$((i+1)). ${display_names[$i]}"
    done
    echo

    local choice
    read -p "Выбор (1-${#display_names[@]}): " choice

    if [[ ! "$choice" =~ ^[0-9]+$ ]] || (( choice < 1 )) || (( choice > ${#shares_data[@]} )); then
        log_warn "Некорректный выбор"
        return
    fi

    local selected_share="${shares_data[$((choice-1))]}"
    local server share display_name options
    IFS='|' read -r server share display_name options <<< "$selected_share"

    mount_smb_share "$server" "$share" "$display_name" "$options"
}

# --- Главное меню ---
smb_connect_menu() {
    if ! check_smbclient_installed; then
        return 1
    fi
    check_mount_cifs_installed # Проверяем, но не прерываем выполнение

    create_default_smb_config_if_needed "$DEFAULT_CONFIG_FILE"

    local menu_items=(
        "Подключиться через smbclient"
        "Смонтировать ресурс"
        "Отмонтировать ресурс"
        "Показать смонтированные ресурсы"
        "Настроить ресурсы"
    )
    local MENU_TITLE="Работа с SMB"
    local selected

    while true; do
        show_menu "$MENU_TITLE" "${menu_items[@]}"
        case "$selected" in
            0) smb_interactive_connect "$DEFAULT_CONFIG_FILE" ;;
            1) smb_mount_resource "$DEFAULT_CONFIG_FILE" ;;
            2) unmount_smb_share ;;
            3)
                clear
                echo -e "${BLUE}=== Смонтированные SMB ресурсы ===${NC}"
                echo
                show_mounted_cifs_shares
                ;;
            4) configure_smb_resources_interactive "$DEFAULT_CONFIG_FILE" ;;
            q) return 0 ;;
            *) log_error "Некорректный выбор" ;;
        esac
        echo
        read -n1 -r -s -p "Нажмите любую клавишу для продолжения..."
    done
}
